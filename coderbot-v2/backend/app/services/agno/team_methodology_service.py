"""
Team Methodology Service - Gera√ß√£o distribu√≠da usando Agno Teams

Divide a gera√ß√£o de conte√∫do educacional em m√∫ltiplos agentes especializados
para garantir qualidade consistente, especialmente com modelos menores.

Estrat√©gia:
1. Content Agent: Gera reflex√£o + passo a passo (R√ÅPIDO)
2. Examples Agent: Gera exemplos correto/incorreto (FOCADO)
3. Quiz Agent: Gera quiz com valida√ß√£o (PRECISO)

Execu√ß√£o:
- Content sempre primeiro (base para os outros)
- Examples + Quiz em PARALELO (performance)
- Total: ~mesma lat√™ncia de uma chamada, mas com qualidade garantida
"""

from typing import Optional, Dict, Any, List
from agno.agent import Agent
from agno.team import Team
import logging
import json
import time

from ..agno_models import create_model

logger = logging.getLogger(__name__)


class TeamMethodologyService:
    def __init__(self, model_id: str, provider: str, base_url: Optional[str] = None, api_key: Optional[str] = None):
        """
        Inicializa o servi√ßo de Teams para metodologia educacional.
        
        Args:
            model_id: ID do modelo a ser usado
            provider: Provedor (claude, openai, ollama)
            base_url: URL base para Ollama
            api_key: API key para Claude/OpenAI
        """
        self.model_id = model_id
        self.provider = provider
        self.base_url = base_url
        self.api_key = api_key
        self.logger = logger
        
    def _create_model_instance(self):
        """Cria inst√¢ncia do modelo com configura√ß√µes apropriadas."""
        model_kwargs = {}
        if self.provider == "ollama" and self.base_url:
            model_kwargs["base_url"] = self.base_url
        elif self.provider in ["claude", "openai"] and self.api_key:
            model_kwargs["api_key"] = self.api_key
            
        return create_model(self.provider, self.model_id, **model_kwargs)
    
    def generate_worked_example_with_team(
        self, 
        user_query: str, 
        context: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Gera worked example usando equipe de agentes especializados.
        
        Args:
            user_query: Pergunta do usu√°rio
            context: Contexto adicional
            
        Returns:
            Dict com:
                - content: Reflex√£o + passo a passo
                - examples: Dict com correct_example e incorrect_example
                - quiz: Dict com question, options, explanation
                - processing_time: Tempo total em segundos
        """
        start_time = time.time()
        
        try:
            # === AGENTE 1: Content Agent (Base) ===
            content_agent = self._create_content_agent()
            content_prompt = self._build_content_prompt(user_query, context)
            
            self.logger.info("üéØ Gerando conte√∫do base (reflex√£o + passos)...")
            content_response = content_agent.run(content_prompt)
            content = content_response.content if hasattr(content_response, 'content') else str(content_response)
            
            # === AGENTES 2 & 3: Examples + Quiz em PARALELO ===
            # Criar team para execu√ß√£o paralela
            examples_agent = self._create_examples_agent()
            quiz_agent = self._create_quiz_agent()
            
            team = Team(
                agents=[examples_agent, quiz_agent],
                name="Educational Content Team"
            )
            
            # Preparar prompts
            examples_prompt = self._build_examples_prompt(user_query, content)
            quiz_prompt = self._build_quiz_prompt(user_query, content)
            
            self.logger.info("üöÄ Gerando exemplos + quiz em paralelo...")
            
            # Executar em paralelo
            examples_response = examples_agent.run(examples_prompt)
            quiz_response = quiz_agent.run(quiz_prompt)
            
            # Extrair resultados
            examples_data = self._parse_examples_response(examples_response)
            quiz_data = self._parse_quiz_response(quiz_response)
            
            processing_time = round(time.time() - start_time, 2)
            
            self.logger.info(f"‚úÖ Gera√ß√£o completa em {processing_time}s")
            
            return {
                "content": content,
                "examples": examples_data,
                "quiz": quiz_data,
                "processing_time": processing_time,
                "metadata": {
                    "model_id": self.model_id,
                    "provider": self.provider,
                    "agents_used": 3,
                    "parallel_execution": True
                }
            }
            
        except Exception as e:
            self.logger.error(f"Erro na gera√ß√£o com team: {e}")
            raise
    
    def _create_content_agent(self) -> Agent:
        """Cria agente especializado em conte√∫do base."""
        model = self._create_model_instance()
        return Agent(
            model=model,
            name="Content Agent",
            description="Especialista em criar reflex√µes e explica√ß√µes passo a passo",
            instructions=[
                "Voc√™ √© um tutor educacional focado em criar APENAS reflex√µes iniciais e explica√ß√µes passo a passo.",
                "N√ÉO gere exemplos de c√≥digo ou quizzes.",
                "Foque em fazer o estudante pensar e em explicar o processo de forma clara.",
                "Use emojis apenas nos t√≠tulos das se√ß√µes."
            ],
            markdown=True
        )
    
    def _create_examples_agent(self) -> Agent:
        """Cria agente especializado em exemplos de c√≥digo."""
        model = self._create_model_instance()
        return Agent(
            model=model,
            name="Examples Agent",
            description="Especialista em criar exemplos de c√≥digo corretos e incorretos",
            instructions=[
                "Voc√™ √© um especialista em criar exemplos de c√≥digo did√°ticos.",
                "Gere SEMPRE c√≥digo REAL e FUNCIONAL relacionado ao t√≥pico.",
                "Nunca use c√≥digo gen√©rico ou placeholder.",
                "Retorne APENAS no formato JSON especificado.",
                "Foque em erros comuns e suas corre√ß√µes."
            ],
            markdown=False
        )
    
    def _create_quiz_agent(self) -> Agent:
        """Cria agente especializado em criar quizzes."""
        model = self._create_model_instance()
        return Agent(
            model=model,
            name="Quiz Agent",
            description="Especialista em criar quizzes educacionais precisos",
            instructions=[
                "Voc√™ √© um especialista em criar quizzes educacionais.",
                "VALIDE que apenas UMA op√ß√£o esteja marcada como correta.",
                "Certifique-se de que a resposta correta est√° REALMENTE correta.",
                "Forne√ßa explica√ß√µes claras para cada op√ß√£o.",
                "Retorne APENAS no formato JSON especificado."
            ],
            markdown=False
        )
    
    def _build_content_prompt(self, user_query: str, context: Optional[str]) -> str:
        """Constr√≥i prompt para o Content Agent."""
        return f"""Crie uma explica√ß√£o educacional passo a passo para a seguinte pergunta:

**Pergunta:** {user_query}

{f'**Contexto:** {context}' if context else ''}

Gere APENAS as seguintes se√ß√µes em Markdown:

## ü§î Reflex√£o Inicial
[Fa√ßa o estudante pensar sobre o problema antes de ver a solu√ß√£o. 2-3 frases.]

## üìù Passo a Passo
1. [Primeiro passo com explica√ß√£o clara]
2. [Segundo passo]
3. [Continue at√© resolver completamente o problema]
[M√≠nimo 3 passos, m√°ximo 6 passos]

## üéØ Padr√µes Importantes
- [Conceito ou padr√£o chave 1]
- [Conceito ou padr√£o chave 2]
[2-4 padr√µes]

## üöÄ Pr√≥ximos Passos
[Sugira 2-3 exerc√≠cios para praticar]

N√ÉO GERE: exemplos de c√≥digo ou quizzes.
"""
    
    def _build_examples_prompt(self, user_query: str, content: str) -> str:
        """Constr√≥i prompt para o Examples Agent."""
        return f"""Crie exemplos de c√≥digo para a seguinte pergunta:

**Pergunta:** {user_query}

**Contexto da explica√ß√£o:**
{content[:500]}...

Gere exemplos de c√≥digo REAIS e FUNCIONAIS. N√ÉO use c√≥digo gen√©rico.

Retorne APENAS um JSON v√°lido neste formato:

{{
  "incorrect_example": {{
    "title": "Exemplo Incorreto",
    "code": "[c√≥digo com erro REAL relacionado √† pergunta]",
    "language": "[linguagem, ex: javascript, python]",
    "error_explanation": "Por que este c√≥digo est√° errado",
    "correction": "Como corrigir este erro"
  }},
  "correct_example": {{
    "title": "Exemplo Correto",
    "code": "[c√≥digo correto e funcional relacionado √† pergunta]",
    "language": "[mesma linguagem]",
    "explanation": "Por que este c√≥digo est√° correto"
  }}
}}

IMPORTANTE:
- C√≥digo DEVE ser relacionado √† pergunta
- Use \\n para quebras de linha no JSON
- N√ÉO use markdown, retorne APENAS JSON
"""
    
    def _build_quiz_prompt(self, user_query: str, content: str) -> str:
        """Constr√≥i prompt para o Quiz Agent."""
        return f"""Crie um quiz educacional para a seguinte pergunta:

**Pergunta:** {user_query}

**Contexto da explica√ß√£o:**
{content[:500]}...

Retorne APENAS um JSON v√°lido neste formato:

{{
  "question": "Pergunta sobre o conceito principal",
  "options": [
    {{"id": "A", "text": "Op√ß√£o A", "correct": true, "reason": "Por que est√° correta"}},
    {{"id": "B", "text": "Op√ß√£o B", "correct": false, "reason": "Por que est√° incorreta"}},
    {{"id": "C", "text": "Op√ß√£o C", "correct": false, "reason": "Por que est√° incorreta"}},
    {{"id": "D", "text": "Op√ß√£o D", "correct": false, "reason": "Por que est√° incorreta"}}
  ],
  "explanation": "Resumo da resposta correta"
}}

REGRAS CR√çTICAS:
- APENAS UMA op√ß√£o pode ter "correct": true
- As outras DEVEM ter "correct": false
- A op√ß√£o marcada como correta DEVE estar corretamente respondida
- N√ÉO use markdown, retorne APENAS JSON
"""
    
    def _parse_examples_response(self, response: Any) -> Dict[str, Any]:
        """Parse da resposta do Examples Agent."""
        try:
            content = response.content if hasattr(response, 'content') else str(response)
            
            # Remover markdown se houver
            content = content.strip()
            if content.startswith('```'):
                # Extrair JSON de dentro do bloco de c√≥digo
                lines = content.split('\n')
                json_lines = [l for l in lines[1:-1] if l.strip()]  # Remove primeira e √∫ltima linha
                content = '\n'.join(json_lines)
            
            examples = json.loads(content)
            
            # Validar estrutura
            if 'correct_example' not in examples or 'incorrect_example' not in examples:
                self.logger.warning("‚ùå Examples response missing required fields")
                return {}
            
            # Validar que tem code
            if not examples['correct_example'].get('code') or not examples['incorrect_example'].get('code'):
                self.logger.warning("‚ùå Examples missing code fields")
                return {}
            
            self.logger.info("‚úÖ Examples parsed successfully")
            return examples
            
        except json.JSONDecodeError as e:
            self.logger.error(f"‚ùå Failed to parse examples JSON: {e}")
            self.logger.error(f"Content: {content[:200]}")
            return {}
        except Exception as e:
            self.logger.error(f"‚ùå Error parsing examples: {e}")
            return {}
    
    def _parse_quiz_response(self, response: Any) -> Dict[str, Any]:
        """Parse da resposta do Quiz Agent."""
        try:
            content = response.content if hasattr(response, 'content') else str(response)
            
            # Remover markdown se houver
            content = content.strip()
            if content.startswith('```'):
                lines = content.split('\n')
                json_lines = [l for l in lines[1:-1] if l.strip()]
                content = '\n'.join(json_lines)
            
            quiz = json.loads(content)
            
            # Validar estrutura
            if 'question' not in quiz or 'options' not in quiz:
                self.logger.warning("‚ùå Quiz response missing required fields")
                return {}
            
            # VALIDAR: apenas uma op√ß√£o correta
            correct_count = sum(1 for opt in quiz['options'] if opt.get('correct', False))
            if correct_count != 1:
                self.logger.warning(f"‚ùå Quiz has {correct_count} correct answers, expected 1. Fixing...")
                # Corrigir: marcar apenas a primeira como correta
                for i, opt in enumerate(quiz['options']):
                    opt['correct'] = (i == 0)
            
            self.logger.info("‚úÖ Quiz parsed successfully")
            return quiz
            
        except json.JSONDecodeError as e:
            self.logger.error(f"‚ùå Failed to parse quiz JSON: {e}")
            self.logger.error(f"Content: {content[:200]}")
            return {}
        except Exception as e:
            self.logger.error(f"‚ùå Error parsing quiz: {e}")
            return {}

