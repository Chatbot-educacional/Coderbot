"""
ExamplesRAGService - Servi√ßo para gerenciar exemplos educacionais contextuais

Este servi√ßo √© respons√°vel por:
1. Validar queries educacionais (anti-gibberish)
2. Buscar exemplos relevantes via RAG (quando Qdrant estiver configurado)
3. Salvar exemplos gerados pelo AGNO
4. Atualizar scores baseado em feedback dos alunos
"""

import re
import math
from typing import Dict, Any, List, Optional, Literal
from datetime import datetime, timedelta
import logging

from pocketbase import PocketBase

try:
    from pocketbase.client import ClientResponseError
except ImportError:
    # Fallback para vers√µes diferentes do PocketBase
    ClientResponseError = Exception

logger = logging.getLogger(__name__)


class ExamplesRAGService:
    """Servi√ßo para gerenciar exemplos educacionais com RAG."""
    
    def __init__(self, pb_client: PocketBase):
        """
        Inicializa o servi√ßo.
        
        Args:
            pb_client: Cliente do PocketBase
        """
        self.pb = pb_client
        
        # Keywords de programa√ß√£o (multil√≠ngue)
        self.programming_keywords = [
            # Portugu√™s
            "c√≥digo", "programar", "fun√ß√£o", "vari√°vel", "loop", "array", 
            "objeto", "classe", "m√©todo", "algoritmo", "bug", "erro", 
            "debug", "compilar", "executar", "syntax", "sintaxe",
            "lista", "dicion√°rio", "string", "integer", "float", "boolean",
            "if", "else", "for", "while", "return", "import", "def",
            "const", "let", "var", "async", "await", "promise", "callback",
            
            # Linguagens
            "javascript", "python", "java", "c++", "typescript", "react", 
            "node", "angular", "vue", "django", "flask", "spring",
            "html", "css", "sql", "mongodb", "postgresql",
            
            # Conceitos
            "recurs√£o", "itera√ß√£o", "estrutura de dados", "api", "rest",
            "json", "xml", "http", "request", "response", "endpoint",
            "frontend", "backend", "fullstack", "database", "query",
            "test", "unit test", "integration", "deploy", "git",
            
            # Ingl√™s (caso aluno pergunte em ingl√™s)
            "code", "program", "function", "variable", "object", "class",
            "method", "algorithm", "loop", "array", "list", "dictionary"
        ]
        
        # Anti-padr√µes (queries claramente off-topic)
        self.off_topic_patterns = [
            r"\b(clima|tempo|weather|temperatura|chuva|sol)\b",
            r"\b(receita|comida|food|cozinha|prato)\b",
            r"\b(futebol|esporte|sport|jogo de futebol|campeonato)\b",
            r"\b(filme|s√©rie|movie|netflix|cinema)\b",
            r"\b(m√∫sica|can√ß√£o|song|banda|artista musical)\b",
            r"\b(fofoca|celebridade|famoso|celebrity)\b",
            r"\b(pol√≠tica|elei√ß√£o|partido pol√≠tico)\b",
            r"\b(religi√£o|igreja|templo|f√©)\b",
        ]
    
    def validate_educational_query(
        self, 
        user_query: str,
        mission_context: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        Valida se a query √© relacionada a programa√ß√£o/educa√ß√£o.
        
        Implementa valida√ß√£o em 3 camadas:
        1. Keywords t√©cnicas
        2. Anti-padr√µes (off-topic)
        3. Alinhamento com miss√£o (se houver)
        
        Args:
            user_query: Pergunta do aluno
            mission_context: Contexto da miss√£o ativa (opcional)
        
        Returns:
            {
                "is_valid": bool,
                "reason": str,
                "confidence": float (0.0-1.0),
                "suggested_redirect": Optional[str]
            }
        """
        if not user_query or len(user_query.strip()) < 3:
            return {
                "is_valid": False,
                "reason": "Query muito curta",
                "confidence": 0.0,
                "suggested_redirect": "Fa√ßa uma pergunta mais detalhada sobre programa√ß√£o! üíª"
            }
        
        query_lower = user_query.lower()
        
        # CAMADA 1: Verificar keywords t√©cnicas
        keyword_matches = sum(1 for kw in self.programming_keywords if kw.lower() in query_lower)
        has_keyword = keyword_matches > 0
        keyword_confidence = min(1.0, keyword_matches * 0.2)
        
        # CAMADA 2: Anti-padr√µes (off-topic)
        for pattern in self.off_topic_patterns:
            if re.search(pattern, query_lower, re.IGNORECASE):
                logger.info(f"Query rejeitada (off-topic): {user_query[:50]}")
                return {
                    "is_valid": False,
                    "reason": "Query n√£o relacionada a programa√ß√£o",
                    "confidence": 0.0,
                    "suggested_redirect": "Sou um assistente de programa√ß√£o! ü§ñ Pergunte sobre c√≥digo, algoritmos, linguagens de programa√ß√£o, etc."
                }
        
        # CAMADA 3: Alinhamento com miss√£o (se houver)
        mission_aligned = True
        mission_confidence = 0.5  # Neutro por padr√£o
        
        if mission_context and mission_context.get('topics'):
            mission_topics = mission_context.get('topics', [])
            topic_matches = sum(
                1 for topic in mission_topics 
                if topic.lower() in query_lower
            )
            mission_aligned = topic_matches > 0 or has_keyword  # Flex√≠vel
            mission_confidence = min(1.0, topic_matches * 0.3 + 0.4)
        
        # DECIS√ÉO FINAL
        if not has_keyword and not mission_aligned:
            return {
                "is_valid": False,
                "reason": "Query muito vaga ou sem contexto educacional",
                "confidence": keyword_confidence,
                "suggested_redirect": "Seja mais espec√≠fico sobre o conceito de programa√ß√£o que deseja aprender. Exemplo: 'Como usar loops em Python?'"
            }
        
        # Calcular confian√ßa final (m√©dia ponderada)
        final_confidence = (keyword_confidence * 0.6) + (mission_confidence * 0.4)
        
        logger.info(
            f"Query validada: {user_query[:50]} | "
            f"Keywords: {keyword_matches} | "
            f"Confidence: {final_confidence:.2f}"
        )
        
        return {
            "is_valid": True,
            "reason": "Query v√°lida e educacional",
            "confidence": final_confidence,
            "keyword_matches": keyword_matches,
            "mission_aligned": mission_aligned
        }
    
    async def save_generated_example(
        self,
        example_data: Dict[str, Any],
        user_query: str,
        chat_session_id: str,
        mission_context: Optional[Dict[str, Any]] = None,
        agno_response_id: Optional[str] = None,
        segment_index: Optional[int] = None
    ) -> Optional[str]:
        """
        Salva exemplo gerado pelo AGNO no PocketBase.
        
        Args:
            example_data: {
                "type": "correct" | "incorrect",
                "title": str,
                "code": str,
                "language": str,
                "explanation": str
            }
            user_query: Query original do aluno
            chat_session_id: ID da sess√£o de chat
            mission_context: Miss√£o ativa (se houver)
            agno_response_id: ID da resposta AGNO no chat
            segment_index: √çndice do segmento na resposta
        
        Returns:
            str: ID do exemplo salvo
        """
        try:
            # Extrair t√≥picos da query (an√°lise simples)
            topics = self._extract_topics_from_query(user_query, mission_context)
            
            # Preparar dados para salvar
            record_data = {
                # Contexto de cria√ß√£o
                "user_query": user_query,
                "chat_session_id": chat_session_id,
                "mission_id": mission_context.get('id') if mission_context else None,
                "class_id": mission_context.get('class') if mission_context else None,
                
                # Conte√∫do do exemplo
                "type": example_data.get("type", "correct"),
                "title": example_data.get("title", "Exemplo")[:255],
                "code": example_data.get("code", ""),
                "language": example_data.get("language", "python"),
                "explanation": example_data.get("explanation", ""),
                
                # Metadados educacionais
                "methodology": "worked_examples",  # Padr√£o
                "difficulty": mission_context.get('difficulty') if mission_context else None,
                "topics": topics,
                
                # Rela√ß√£o com resposta AGNO
                "agno_response_id": agno_response_id,
                "segment_index": segment_index,
                
                # Feedback inicial
                "upvotes": 0,
                "downvotes": 0,
                "quality_score": 0.5,  # Score inicial neutro
                "usage_count": 1,  # Gerado = usado 1x
            }
            
            # Salvar no PocketBase
            record = await self.pb.collection('contextual_examples').create(record_data)
            
            logger.info(f"Exemplo salvo: {record.id} | Tipo: {record_data['type']} | Query: {user_query[:50]}")
            
            return record.id
            
        except ClientResponseError as e:
            logger.error(f"Erro ao salvar exemplo: {e}")
            # N√£o falhar a requisi√ß√£o se n√£o conseguir salvar exemplo
            return None
        except Exception as e:
            logger.error(f"Erro inesperado ao salvar exemplo: {e}")
            return None
    
    def _extract_topics_from_query(
        self, 
        user_query: str, 
        mission_context: Optional[Dict[str, Any]] = None
    ) -> List[str]:
        """
        Extrai t√≥picos relevantes da query.
        
        Estrat√©gia:
        1. Priorizar t√≥picos da miss√£o se houver
        2. Identificar linguagens mencionadas
        3. Identificar conceitos t√©cnicos
        """
        topics = []
        query_lower = user_query.lower()
        
        # T√≥picos da miss√£o (prioridade)
        if mission_context and mission_context.get('topics'):
            topics.extend(mission_context['topics'])
        
        # Linguagens de programa√ß√£o
        languages = [
            "python", "javascript", "java", "c++", "typescript", 
            "ruby", "go", "rust", "php", "swift", "kotlin"
        ]
        for lang in languages:
            if lang in query_lower:
                topics.append(lang)
        
        # Conceitos t√©cnicos comuns
        concepts = [
            "function", "fun√ß√£o", "loop", "array", "object", "objeto",
            "class", "classe", "async", "promise", "callback", "recursion",
            "recurs√£o", "api", "rest", "database", "query"
        ]
        for concept in concepts:
            if concept in query_lower:
                topics.append(concept)
        
        # Remover duplicatas e limitar a 5 t√≥picos
        return list(set(topics))[:5]
    
    async def update_feedback_score(
        self, 
        example_id: str,
        vote: Literal["up", "down"],
        user_id: str,
        feedback_type: str = "helpful",
        comment: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Atualiza score baseado em feedback do aluno.
        
        Fluxo:
        1. Verificar se usu√°rio j√° votou (evitar duplicatas)
        2. Salvar feedback em example_feedback
        3. Recalcular quality_score usando Wilson Score
        4. Atualizar no PocketBase
        
        Args:
            example_id: ID do exemplo
            vote: "up" ou "down"
            user_id: ID do aluno
            feedback_type: Tipo de feedback
            comment: Coment√°rio opcional
        
        Returns:
            Dict com informa√ß√µes do feedback atualizado
        """
        try:
            # 1. Verificar se j√° votou
            existing_feedbacks = await self.pb.collection('example_feedback').get_list(
                1, 1,
                {
                    'filter': f'example_id = "{example_id}" && user_id = "{user_id}"'
                }
            )
            
            if existing_feedbacks.total_items > 0:
                logger.info(f"Usu√°rio {user_id} j√° votou no exemplo {example_id}")
                return {
                    "status": "already_voted",
                    "message": "Voc√™ j√° votou neste exemplo"
                }
            
            # 2. Salvar feedback
            feedback_data = {
                "example_id": example_id,
                "user_id": user_id,
                "vote": vote,
                "feedback_type": feedback_type,
                "comment": comment
            }
            await self.pb.collection('example_feedback').create(feedback_data)
            
            # 3. Buscar exemplo atual
            example = await self.pb.collection('contextual_examples').get_one(example_id)
            
            # 4. Atualizar contadores
            upvotes = example.upvotes + (1 if vote == "up" else 0)
            downvotes = example.downvotes + (1 if vote == "down" else 0)
            
            # 5. Recalcular quality_score
            days_since_creation = (datetime.now() - datetime.fromisoformat(example.created)).days
            new_score = self._calculate_quality_score(
                upvotes=upvotes,
                downvotes=downvotes,
                usage_count=example.usage_count,
                days_since_creation=days_since_creation
            )
            
            # 6. Atualizar no PocketBase
            await self.pb.collection('contextual_examples').update(example_id, {
                "upvotes": upvotes,
                "downvotes": downvotes,
                "quality_score": new_score
            })
            
            logger.info(
                f"Feedback registrado: exemplo={example_id} | "
                f"vote={vote} | score={new_score:.3f} | "
                f"upvotes={upvotes} | downvotes={downvotes}"
            )
            
            return {
                "status": "success",
                "example_id": example_id,
                "upvotes": upvotes,
                "downvotes": downvotes,
                "quality_score": new_score
            }
            
        except ClientResponseError as e:
            logger.error(f"Erro ao atualizar feedback: {e}")
            raise
        except Exception as e:
            logger.error(f"Erro inesperado ao atualizar feedback: {e}")
            raise
    
    def _calculate_quality_score(
        self,
        upvotes: int, 
        downvotes: int, 
        usage_count: int,
        days_since_creation: int
    ) -> float:
        """
        Calcula quality_score usando Wilson Score Interval.
        
        Algoritmo similar ao Reddit/StackOverflow com ajustes educacionais:
        - Wilson Score (95% confidence) para confiabilidade estat√≠stica
        - Freshness penalty (exemplos antigos perdem relev√¢ncia)
        - Usage boost (exemplos muito usados ganham pontos)
        
        Returns:
            float entre 0.0 e 1.0
        """
        total_votes = upvotes + downvotes
        
        # Sem votos: score base neutro
        if total_votes == 0:
            return 0.5
        
        # Wilson Score (95% confidence)
        z = 1.96  # Z-score para 95% de confian√ßa
        p = upvotes / total_votes
        
        try:
            wilson = (
                p + z*z/(2*total_votes) - 
                z * math.sqrt((p*(1-p) + z*z/(4*total_votes))/total_votes)
            ) / (1 + z*z/total_votes)
        except (ZeroDivisionError, ValueError):
            wilson = 0.5
        
        # Penalidade por antiguidade (decay ap√≥s 30 dias, estabiliza em 70%)
        # Exemplos recentes s√£o mais relevantes
        freshness_factor = max(0.7, 1.0 - (days_since_creation / 120))
        
        # Boost por uso repetido (m√°ximo +0.15)
        # Exemplos comprovadamente √∫teis ganham pontos
        usage_boost = min(0.15, usage_count * 0.02)
        
        # Score final (limitado entre 0 e 1)
        final_score = min(1.0, max(0.0, wilson * freshness_factor + usage_boost))
        
        return round(final_score, 3)
    
    async def get_example_with_feedback(self, example_id: str) -> Dict[str, Any]:
        """
        Retorna exemplo com estat√≠sticas de feedback.
        
        Args:
            example_id: ID do exemplo
        
        Returns:
            Dict com dados do exemplo + estat√≠sticas
        """
        try:
            example = await self.pb.collection('contextual_examples').get_one(example_id)
            
            # Buscar feedbacks
            feedbacks = await self.pb.collection('example_feedback').get_list(
                1, 100,  # Limite razo√°vel
                {'filter': f'example_id = "{example_id}"'}
            )
            
            return {
                "id": example.id,
                "title": example.title,
                "code": example.code,
                "language": example.language,
                "explanation": example.explanation,
                "type": example.type,
                "upvotes": example.upvotes,
                "downvotes": example.downvotes,
                "quality_score": example.quality_score,
                "usage_count": example.usage_count,
                "topics": example.topics,
                "difficulty": example.difficulty,
                "created": example.created,
                "feedbacks": [
                    {
                        "user_id": f.user_id,
                        "vote": f.vote,
                        "feedback_type": f.feedback_type,
                        "comment": f.comment,
                        "created": f.created
                    }
                    for f in feedbacks.items
                ]
            }
            
        except ClientResponseError as e:
            logger.error(f"Erro ao buscar exemplo: {e}")
            raise
    
    async def search_relevant_examples(
        self,
        user_query: str,
        mission_context: Optional[Dict[str, Any]] = None,
        top_k: int = 3,
        min_quality_score: float = 0.6
    ) -> List[Dict[str, Any]]:
        """
        Busca exemplos relevantes (preparado para RAG futuro).
        
        Por enquanto, faz busca simples por t√≥picos.
        Quando Qdrant for integrado, usar√° busca sem√¢ntica.
        
        Args:
            user_query: Query do aluno
            mission_context: Contexto da miss√£o
            methodology: Metodologia educacional
            top_k: N√∫mero de exemplos a retornar
            min_quality_score: Score m√≠nimo de qualidade
        
        Returns:
            Lista de exemplos relevantes
        """
        try:
            # Extrair t√≥picos da query
            topics = self._extract_topics_from_query(user_query, mission_context)
            
            if not topics:
                logger.info("Nenhum t√≥pico identificado para busca")
                return []
            
            # Buscar exemplos por t√≥picos (fallback at√© Qdrant ser integrado)
            # Criar filtro: qualquer t√≥pico match
            topic_filters = ' || '.join([f'topics ~ "{topic}"' for topic in topics])
            filter_query = f'({topic_filters}) && quality_score >= {min_quality_score}'
            
            examples = await self.pb.collection('contextual_examples').get_list(
                1, top_k,
                {
                    'filter': filter_query,
                    'sort': '-quality_score,-created'
                }
            )
            
            logger.info(f"Exemplos encontrados: {examples.total_items} | T√≥picos: {topics}")
            
            return [
                {
                    "id": ex.id,
                    "title": ex.title,
                    "code": ex.code[:200] + "..." if len(ex.code) > 200 else ex.code,  # Resumo
                    "explanation": ex.explanation[:300] + "..." if len(ex.explanation) > 300 else ex.explanation,
                    "type": ex.type,
                    "language": ex.language,
                    "quality_score": ex.quality_score,
                    "upvotes": ex.upvotes,
                    "topics": ex.topics
                }
                for ex in examples.items
            ]
            
        except ClientResponseError as e:
            logger.error(f"Erro ao buscar exemplos: {e}")
            return []
        except Exception as e:
            logger.error(f"Erro inesperado ao buscar exemplos: {e}")
            return []


# Singleton para dependency injection
_examples_rag_service_instance = None

def get_examples_rag_service(pb_client: PocketBase) -> ExamplesRAGService:
    """Factory function para criar/reusar inst√¢ncia do servi√ßo."""
    global _examples_rag_service_instance
    
    if _examples_rag_service_instance is None:
        _examples_rag_service_instance = ExamplesRAGService(pb_client)
    
    return _examples_rag_service_instance
