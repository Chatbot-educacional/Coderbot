#!/usr/bin/env python3
"""
Script para criar o novo template de worked examples com estrutura JSON espec√≠fica
no PocketBase.
"""

import os
import sys
from pocketbase import PocketBase
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o do PocketBase
POCKETBASE_URL = os.getenv("POCKETBASE_URL", "http://localhost:8090")
ADMIN_EMAIL = os.getenv("POCKETBASE_ADMIN_EMAIL", "admin@example.com")
ADMIN_PASSWORD = os.getenv("POCKETBASE_ADMIN_PASSWORD", "adminpassword")

# Template atualizado para worked examples com estrutura organizacional impl√≠cita
WORKED_EXAMPLES_TEMPLATE = """Voc√™ √© um especialista em ensino atrav√©s de exemplos trabalhados.
Sua miss√£o √© criar respostas estruturadas e interativas para facilitar o aprendizado.

IMPORTANTE: Organize sua resposta usando as seguintes se√ß√µes, mas N√ÉO mostre os cabe√ßalhos "Title", "Topic" e "Knowledge" para o usu√°rio final:

üéØ **[T√≠tulo do exemplo]**

üìö **Explica√ß√£o:**
[Descri√ß√£o detalhada do problema e conceitos necess√°rios]

üí° **Exemplo Pr√°tico:**
[Exemplo resolvido PASSO A PASSO corretamente - inclua:
- **Racioc√≠nio:** An√°lise do problema
- **Passos da solu√ß√£o:** Cada etapa explicada
- **Teste:** Como testar com exemplo espec√≠fico
- **C√≥digo completo:** Solu√ß√£o funcional]

üî• **Dica Pro:**
[Recursos extras ou materiais de apoio]

üèãÔ∏è **Exerc√≠cio:**
[Apresente um c√≥digo com erro comum e:
- Mostre o c√≥digo incorreto
- Apresente 4-5 op√ß√µes de poss√≠veis erros
- N√ÉO revele a resposta imediatamente
- Diga: "Qual voc√™ acha que √© o erro? Escolha uma op√ß√£o e eu explico!"
- Aguarde a intera√ß√£o do aluno]

DIRETRIZES IMPORTANTES:
1. N√ÉO mostre se√ß√µes "Title", "Topic" ou "Knowledge" na resposta final
2. Use emojis e formata√ß√£o moderna para tornar o conte√∫do atrativo
3. No exerc√≠cio, apresente as op√ß√µes mas N√ÉO revele a resposta correta
4. Incentive a intera√ß√£o: "O que voc√™ acha?"
5. Seja did√°tico e use linguagem acess√≠vel
6. Torne o c√≥digo facilmente copi√°vel com blocos ```java```

CONTEXTO DO ALUNO:
- N√≠vel de dificuldade: {difficulty_level}
- Conhecimento base: {baseKnowledge}
- Progresso de aprendizado: {learning_progress}
- √Årea de estudo: {subject_area}

CONTEXTO RELEVANTE DA BASE DE CONHECIMENTO:
{knowledge_base}

HIST√ìRICO DA CONVERSA:
{context_history}

PERGUNTA DO USU√ÅRIO:
{user_query}

Crie um exemplo trabalhado envolvente seguindo a estrutura acima.
Lembre-se: no exerc√≠cio, apresente as op√ß√µes e incentive a participa√ß√£o do aluno!"""

def create_template():
    """Cria o template no PocketBase"""
    try:
        client = PocketBase(POCKETBASE_URL)
        
        # Autentica como admin
        client.admins.auth_with_password(ADMIN_EMAIL, ADMIN_PASSWORD)
        print("‚úÖ Autenticado como admin no PocketBase")
        
        # Dados do template
        template_data = {
            "name": "default_worked_examples",
            "methodology": "worked_examples", 
            "template": WORKED_EXAMPLES_TEMPLATE,
            "description": "Template para metodologia de Exemplos Trabalhados com estrutura organizacional baseada em se√ß√µes",
            "version": 2,  # Incrementando a vers√£o
            "is_active": True
        }
        
        # Verifica se j√° existe
        try:
            existing = client.collection("dynamic_prompts").get_list(
                page=1, per_page=1,
                query_params={"filter": 'name="default_worked_examples" && methodology="worked_examples"'}
            )
            
            if existing.items:
                # Atualiza o existente
                record_id = existing.items[0].id
                updated = client.collection("dynamic_prompts").update(record_id, template_data)
                print(f"‚úÖ Template atualizado com sucesso! ID: {updated.id}")
                return True
            else:
                # Cria novo
                created = client.collection("dynamic_prompts").create(template_data)
                print(f"‚úÖ Novo template criado com sucesso! ID: {created.id}")
                return True
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar/criar template: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao conectar com PocketBase: {e}")
        return False

def verify_template():
    """Verifica se o template foi criado corretamente"""
    try:
        client = PocketBase(POCKETBASE_URL)
        
        # Busca o template sem autentica√ß√£o (teste de acesso p√∫blico)
        records = client.collection("dynamic_prompts").get_list(
            page=1, per_page=1,
            query_params={"filter": 'methodology="worked_examples" && is_active=true'}
        )
        
        if records.items:
            template = records.items[0]
            print(f"‚úÖ Template encontrado:")
            print(f"   - ID: {template.id}")
            print(f"   - Nome: {template.name}")
            print(f"   - Metodologia: {template.methodology}")
            print(f"   - Vers√£o: {getattr(template, 'version', 'N/A')}")
            print(f"   - Ativo: {template.is_active}")
            print(f"   - Tamanho do template: {len(template.template)} caracteres")
            return True
        else:
            print("‚ùå Template n√£o encontrado!")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar template: {e}")
        return False

if __name__ == "__main__":
    print("üîß Criando/atualizando template 'default_worked_examples' com estrutura JSON...")
    
    if create_template():
        print("\nüîç Verificando template criado...")
        verify_template()
    else:
        print("‚ùå Falha ao criar template")
        sys.exit(1)
    
    print("\n‚úÖ Processo conclu√≠do!")
