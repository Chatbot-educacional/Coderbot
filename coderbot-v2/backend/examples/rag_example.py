"""
Exemplo de uso do sistema RAG integrado com o CoderBot v2

Este script demonstra como:
1. Indexar conte√∫do educacional no Qdrant
2. Realizar buscas RAG
3. Usar agentes educacionais personalizados
4. Integrar com o sistema AGNO existente
5. Usar diferentes provedores de IA (OpenAI, Claude, Ollama, Open Router)

Para executar:
python examples/rag_example.py

Pr√©-requisitos:
- Para Ollama: Instalar Ollama e executar 'ollama serve'
- Para Open Router: Obter chave da API em https://openrouter.ai/
- Configurar vari√°veis de ambiente no arquivo .env
"""

import asyncio
import json
import os
from app.services.rag_service import RAGService, EducationalContent
from app.services.educational_agent_service import EducationalAgentService, StudentProfile
from app.services.agno_methodology_service import AgnoMethodologyService

async def demo_rag_system():
    """Demonstra√ß√£o completa do sistema RAG educacional."""

    print("üöÄ Iniciando demonstra√ß√£o do sistema RAG educacional\n")

    # 1. Inicializar servi√ßos
    print("1Ô∏è‚É£ Inicializando servi√ßos...")
    rag_service = RAGService()
    agno_service = AgnoMethodologyService()
    agent_service = EducationalAgentService(rag_service, agno_service)

    # Aguardar inicializa√ß√£o da cole√ß√£o Qdrant
    await asyncio.sleep(2)

    print("‚úÖ Servi√ßos inicializados\n")

    # 2. Indexar conte√∫do educacional de exemplo
    print("2Ô∏è‚É£ Indexando conte√∫do educacional...")

    sample_content = [
        EducationalContent(
            id="algoritmos-intro",
            title="Introdu√ß√£o aos Algoritmos",
            content="""
            Algoritmos s√£o sequ√™ncias finitas de passos bem definidos para resolver um problema.
            Um algoritmo deve ter as seguintes caracter√≠sticas:

            1. **Finitude**: Deve terminar ap√≥s um n√∫mero finito de passos
            2. **Defini√ß√£o**: Cada passo deve ser definido de forma precisa
            3. **Entrada**: Pode receber dados de entrada
            4. **Sa√≠da**: Deve produzir um resultado
            5. **Efetividade**: Deve ser execut√°vel por uma m√°quina

            Exemplos comuns de algoritmos incluem:
            - Receitas de culin√°ria
            - Instru√ß√µes de montagem
            - Procedimentos m√©dicos
            - Programas de computador

            Na programa√ß√£o, algoritmos s√£o implementados usando estruturas de controle como:
            - Sequ√™ncia (execu√ß√£o linear)
            - Sele√ß√£o (if/else)
            - Itera√ß√£o (loops while/for)
            """,
            content_type="lesson",
            subject="programa√ß√£o",
            topic="algoritmos",
            difficulty="beginner",
            tags=["algoritmos", "programa√ß√£o", "l√≥gica", "introdu√ß√£o"]
        ),

        EducationalContent(
            id="funcoes-matematicas",
            title="Fun√ß√µes Matem√°ticas: Conceitos B√°sicos",
            content="""
            Uma fun√ß√£o matem√°tica √© uma rela√ß√£o entre dois conjuntos que associa a cada elemento
            do primeiro conjunto exatamente um elemento do segundo conjunto.

            **Defini√ß√£o Formal:**
            Uma fun√ß√£o f: A ‚Üí B √© uma rela√ß√£o que associa cada elemento x ‚àà A a um √∫nico elemento y ‚àà B.

            **Elementos de uma fun√ß√£o:**
            - **Dom√≠nio**: Conjunto de valores de entrada (x)
            - **Contra-dom√≠nio**: Conjunto onde os valores de sa√≠da est√£o contidos
            - **Imagem**: Conjunto dos valores de sa√≠da efetivamente atingidos
            - **Gr√°fico**: Conjunto de pontos (x, f(x))

            **Propriedades importantes:**
            - Injetora (injetiva): Cada y tem no m√°ximo um x
            - Sobrejetora (sobrejetiva): Todo y do contra-dom√≠nio √© atingido
            - Bijetora: Injetora e sobrejetiva simultaneamente

            **Exemplos:**
            - f(x) = 2x + 1 (fun√ß√£o linear)
            - f(x) = x¬≤ (fun√ß√£o quadr√°tica)
            - f(x) = sin(x) (fun√ß√£o trigonom√©trica)
            """,
            content_type="theory",
            subject="matem√°tica",
            topic="fun√ß√µes",
            difficulty="intermediate",
            tags=["fun√ß√µes", "matem√°tica", "√°lgebra", "conceitos"]
        ),

        EducationalContent(
            id="programacao-python",
            title="Primeiros Passos em Python",
            content="""
            Python √© uma linguagem de programa√ß√£o de alto n√≠vel, interpretada e multiparadigm√°tica.

            **Sintaxe B√°sica:**

            ```python
            # Coment√°rios come√ßam com #
            print("Ol√°, mundo!")  # Sa√≠da: Ol√°, mundo!

            # Vari√°veis
            nome = "Jo√£o"
            idade = 25
            altura = 1.75

            # Estruturas condicionais
            if idade >= 18:
                print("Maior de idade")
            else:
                print("Menor de idade")

            # Loops
            for i in range(5):
                print(f"N√∫mero: {i}")

            # Fun√ß√µes
            def saudacao(nome):
                return f"Ol√°, {nome}!"

            # Listas
            frutas = ["ma√ß√£", "banana", "laranja"]
            frutas.append("uva")
            ```

            **Conceitos Fundamentais:**
            - **Vari√°veis**: Armazenam dados
            - **Tipos**: int, float, str, bool, list, dict
            - **Operadores**: +, -, *, /, %, ==, !=, <, >, <=, >=
            - **Estruturas de controle**: if/elif/else, for, while
            - **Fun√ß√µes**: Definem comportamentos reutiliz√°veis
            """,
            content_type="tutorial",
            subject="programa√ß√£o",
            topic="python",
            difficulty="beginner",
            tags=["python", "programa√ß√£o", "sintaxe", "iniciante"]
        )
    ]

    for content in sample_content:
        await rag_service.index_content(content)
        print(f"‚úÖ Indexado: {content.title}")

    print("\n‚úÖ Conte√∫do educacional indexado\n")

    # 3. Demonstrar busca RAG
    print("3Ô∏è‚É£ Demonstrando busca RAG...")

    search_queries = [
        "Como funciona um algoritmo?",
        "O que √© uma fun√ß√£o matem√°tica?",
        "Como come√ßar a programar em Python?"
    ]

    for query in search_queries:
        print(f"\nüîç Busca: '{query}'")
        results = await rag_service.search_content(
            type('SearchQuery', (), {
                'query': query,
                'limit': 2,
                'score_threshold': 0.6
            })()
        )

        for i, result in enumerate(results, 1):
            print(f"  {i}. {result.content.title} (score: {result.score:.2f})")
            print(f"     üìÑ {result.context_snippet[:100]}...")

    print("\n‚úÖ Demonstra√ß√£o de busca conclu√≠da\n")

    # 4. Demonstrar agente educacional
    print("4Ô∏è‚É£ Demonstrando agente educacional personalizado...")

    # Criar perfil de estudante
    student_profile = StudentProfile(
        user_id="demo_student_001",
        name="Jo√£o Silva",
        learning_style="visual",
        current_level="beginner",
        subjects=["programa√ß√£o", "matem√°tica"],
        preferred_methodologies=["worked_examples", "sequential_thinking"],
        learning_goals=["Aprender Python", "Entender algoritmos"],
        learning_pace="moderate"
    )

    # Consulta educacional
    educational_query = "Como posso criar um algoritmo simples para calcular a m√©dia de uma lista de n√∫meros?"

    print(f"üë§ Estudante: {student_profile.name}")
    print(f"üéØ Consulta: {educational_query}")
    print(f"üìö Perfil: {student_profile.learning_style}, n√≠vel {student_profile.current_level}")

    # Processar com agente educacional
    response = await agent_service.process_educational_query(
        query=educational_query,
        user_id=student_profile.user_id,
        user_profile={
            "learning_style": student_profile.learning_style,
            "current_level": student_profile.current_level,
            "subjects": student_profile.subjects,
            "preferred_methodologies": student_profile.preferred_methodologies
        }
    )

    print("
ü§ñ Resposta do Agente Educacional:"    print(f"üìù Metodologia usada: {response.methodology_used}")
    print(f"üéØ Pontua√ß√£o de personaliza√ß√£o: {response.personalization_score:.2f}")
    print(f"üí¨ Pontua√ß√£o de engajamento: {response.engagement_score:.2f}")
    print("
üí° A√ß√µes recomendadas:"    for action in response.recommended_actions[:3]:
        print(f"   ‚Ä¢ {action}")

    print("
üìà Pr√≥ximos t√≥picos sugeridos:"    for topic in response.next_topics[:3]:
        print(f"   ‚Ä¢ {topic}")

    print(f"\nüìÑ Resposta completa:\n{response.response[:500]}...\n")

    # 5. Demonstrar integra√ß√£o com AGNO
    print("5Ô∏è‚É£ Demonstrando integra√ß√£o com sistema AGNO existente...")

    # Usar AGNO diretamente com contexto RAG
    rag_context = await rag_service.build_rag_context(
        query=educational_query,
        user_context={
            "learning_style": "visual",
            "difficulty": "beginner"
        }
    )

    print(f"üìä Contexto RAG constru√≠do:")
    print(f"   ‚Ä¢ {len(rag_context.retrieved_content)} documentos recuperados")
    print(f"   ‚Ä¢ {rag_context.context_tokens} tokens de contexto")
    print(f"   ‚Ä¢ Score de relev√¢ncia: {rag_context.relevance_score:.2f}")

    print("\n‚úÖ Demonstra√ß√£o completa do sistema RAG educacional conclu√≠da!")
    print("\nüéâ O sistema agora oferece:")
    print("   ‚Ä¢ Busca sem√¢ntica inteligente de conte√∫do educacional")
    print("   ‚Ä¢ Personaliza√ß√£o baseada em perfil do estudante")
    print("   ‚Ä¢ Context engineering avan√ßado")
    print("   ‚Ä¢ Integra√ß√£o perfeita com metodologias AGNO")
    print("   ‚Ä¢ Suporte a m√∫ltiplos provedores de IA (OpenAI, Claude, Ollama, Open Router)")

if __name__ == "__main__":
    asyncio.run(demo_rag_system())

async def demo_multiple_providers():
    """Demonstra√ß√£o de uso com diferentes provedores de IA."""

    print("\nüîÑ Demonstrando suporte a m√∫ltiplos provedores de IA\n")

    providers_to_test = [
        ("claude", "claude-3-5-sonnet-20241022"),
        ("openai", "gpt-4o"),
        ("ollama", "llama3.2"),
        ("openrouter", "anthropic/claude-3-5-sonnet")
    ]

    test_query = "Explique o conceito de recurs√£o em programa√ß√£o de forma simples"

    for provider, model in providers_to_test:
        try:
            print(f"\nü§ñ Testando provedor: {provider.upper()} com modelo {model}")

            # Verificar se as chaves est√£o configuradas
            if provider == "ollama" and not os.getenv("OLLAMA_HOST"):
                print(f"   ‚ö†Ô∏è  Ollama n√£o configurado (OLLAMA_HOST), pulando...")
                continue
            elif provider == "openrouter" and not os.getenv("OPENROUTER_API_KEY"):
                print(f"   ‚ö†Ô∏è  Open Router n√£o configurado (OPENROUTER_API_KEY), pulando...")
                continue
            elif provider in ["claude", "openai"] and not any([
                os.getenv("CLAUDE_API_KEY"),
                os.getenv("OPEN_AI_API_KEY")
            ]):
                print(f"   ‚ö†Ô∏è  {provider.upper()} n√£o configurado, pulando...")
                continue

            # Criar servi√ßo AGNO com o provedor espec√≠fico
            agno_service = AgnoMethodologyService(model_id=model, provider=provider)

            # Fazer uma pergunta de teste
            start_time = asyncio.get_event_loop().time()
            response = agno_service.ask(
                methodology=agno_service._get_methodology_from_string("worked_examples"),
                user_query=test_query
            )
            end_time = asyncio.get_event_loop().time()

            print(f"   ‚úÖ Resposta gerada em {end_time - start_time:.2f}s")
            print(f"   üìù Resposta: {response[:100]}...")

        except Exception as e:
            print(f"   ‚ùå Erro com {provider}: {str(e)}")

    print("\nüéØ Para usar um provedor espec√≠fico na API:")
    print("   POST /agno/ask?provider=ollama&model_id=llama3.2")
    print("   POST /agno/ask?provider=openrouter&model_id=anthropic/claude-3-5-sonnet")
    print("   ‚Ä¢ Recomenda√ß√µes pedag√≥gicas autom√°ticas")

if __name__ == "__main__":
    asyncio.run(demo_rag_system())
