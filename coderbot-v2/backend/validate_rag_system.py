#!/usr/bin/env python3
"""
Script de valida√ß√£o do sistema RAG + Exemplos + Feedback.

Testa:
1. Valida√ß√£o anti-gibberish
2. Salvamento de exemplos
3. Sistema de feedback
4. C√°lculo de quality_score
"""

import sys
import os

# Adicionar path do backend
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'backend'))

from app.services.examples_rag_service import ExamplesRAGService


def test_anti_gibberish():
    """Testa valida√ß√£o anti-gibberish."""
    print("\nüß™ Teste 1: Valida√ß√£o Anti-Gibberish")
    print("=" * 60)
    
    service = ExamplesRAGService(None)
    
    test_cases = [
        # (query, should_pass, description)
        ("Como usar loops em Python?", True, "Query v√°lida sobre programa√ß√£o"),
        ("Qual o melhor time de futebol?", False, "Query sobre futebol (off-topic)"),
        ("Me ensine a fazer um bolo", False, "Query sobre receita (off-topic)"),
        ("O que √© recurs√£o?", True, "Query v√°lida sobre conceito"),
        ("Como est√° o clima hoje?", False, "Query sobre clima (off-topic)"),
        ("Como criar uma fun√ß√£o em JavaScript?", True, "Query v√°lida sobre JS"),
        ("asd", False, "Query muito curta"),
    ]
    
    passed = 0
    failed = 0
    
    for query, should_pass, description in test_cases:
        result = service.validate_educational_query(query)
        is_valid = result["is_valid"]
        
        status = "‚úÖ" if is_valid == should_pass else "‚ùå"
        passed += 1 if is_valid == should_pass else 0
        failed += 0 if is_valid == should_pass else 1
        
        print(f"\n{status} {description}")
        print(f"   Query: \"{query}\"")
        print(f"   Esperado: {'V√°lida' if should_pass else 'Inv√°lida'}")
        print(f"   Resultado: {'V√°lida' if is_valid else 'Inv√°lida'}")
        print(f"   Confidence: {result.get('confidence', 0):.2f}")
        
        if not is_valid:
            print(f"   Raz√£o: {result['reason']}")
    
    print(f"\nüìä Resultado: {passed}/{len(test_cases)} testes passaram")
    return failed == 0


def test_quality_score_calculation():
    """Testa c√°lculo de quality_score."""
    print("\nüß™ Teste 2: C√°lculo de Quality Score")
    print("=" * 60)
    
    service = ExamplesRAGService(None)
    
    test_cases = [
        # (upvotes, downvotes, usage_count, days, expected_range, description)
        (0, 0, 1, 0, (0.5, 0.5), "Novo exemplo sem votos"),
        (1, 0, 1, 0, (0.5, 0.7), "1 upvote (poucos dados)"),
        (10, 0, 1, 0, (0.7, 0.85), "10 upvotes (bom)"),
        (20, 3, 1, 0, (0.75, 0.85), "20 up, 3 down (√≥timo)"),
        (20, 3, 50, 0, (0.8, 0.95), "Muito usado (usage boost)"),
        (20, 3, 1, 90, (0.65, 0.75), "Antigo 90 dias (decay)"),
        (3, 7, 1, 0, (0.2, 0.4), "Mais downvotes que upvotes"),
    ]
    
    passed = 0
    
    for upvotes, downvotes, usage, days, expected_range, description in test_cases:
        score = service._calculate_quality_score(upvotes, downvotes, usage, days)
        
        min_score, max_score = expected_range
        is_valid = min_score <= score <= max_score
        
        status = "‚úÖ" if is_valid else "‚ùå"
        passed += 1 if is_valid else 0
        
        print(f"\n{status} {description}")
        print(f"   Upvotes: {upvotes}, Downvotes: {downvotes}")
        print(f"   Usage: {usage}x, Age: {days} dias")
        print(f"   Score: {score:.3f}")
        print(f"   Esperado: {min_score:.2f} - {max_score:.2f}")
    
    print(f"\nüìä Resultado: {passed}/{len(test_cases)} testes passaram")
    return passed == len(test_cases)


def test_topic_extraction():
    """Testa extra√ß√£o de t√≥picos."""
    print("\nüß™ Teste 3: Extra√ß√£o de T√≥picos")
    print("=" * 60)
    
    service = ExamplesRAGService(None)
    
    test_cases = [
        (
            "Como usar map em JavaScript?",
            None,
            ["javascript", "map"]
        ),
        (
            "Como criar uma fun√ß√£o recursiva em Python?",
            None,
            ["python", "recursion", "fun√ß√£o"]
        ),
        (
            "O que √© um array?",
            {"topics": ["javascript", "arrays"]},
            ["javascript", "arrays", "array"]
        ),
    ]
    
    passed = 0
    
    for query, mission_context, expected_topics in test_cases:
        topics = service._extract_topics_from_query(query, mission_context)
        
        # Verificar se pelo menos alguns t√≥picos esperados est√£o presentes
        found = sum(1 for t in expected_topics if t in topics)
        is_valid = found >= len(expected_topics) // 2  # Pelo menos metade
        
        status = "‚úÖ" if is_valid else "‚ùå"
        passed += 1 if is_valid else 0
        
        print(f"\n{status} Query: \"{query}\"")
        print(f"   T√≥picos extra√≠dos: {topics}")
        print(f"   T√≥picos esperados: {expected_topics}")
        print(f"   Match: {found}/{len(expected_topics)}")
    
    print(f"\nüìä Resultado: {passed}/{len(test_cases)} testes passaram")
    return passed == len(test_cases)


def main():
    """Executa todos os testes."""
    print("üöÄ Valida√ß√£o do Sistema RAG + Exemplos + Feedback")
    print("=" * 60)
    
    results = []
    
    results.append(("Anti-Gibberish", test_anti_gibberish()))
    results.append(("Quality Score", test_quality_score_calculation()))
    results.append(("Topic Extraction", test_topic_extraction()))
    
    print("\n" + "=" * 60)
    print("üìã RESUMO FINAL")
    print("=" * 60)
    
    for test_name, passed in results:
        status = "‚úÖ PASSOU" if passed else "‚ùå FALHOU"
        print(f"{status}: {test_name}")
    
    all_passed = all(passed for _, passed in results)
    
    if all_passed:
        print("\nüéâ Todos os testes passaram!")
        return 0
    else:
        print("\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
