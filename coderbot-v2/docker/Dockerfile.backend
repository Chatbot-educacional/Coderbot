# Backend Dockerfile with PDM
FROM python:3.12-slim

# Instalar depend√™ncias do sistema
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Instalar PDM
RUN pip install --no-cache-dir pdm

# Definir diret√≥rio de trabalho
WORKDIR /app

# Copiar arquivos de configura√ß√£o do PDM
COPY backend/pyproject.toml backend/pdm.lock* ./

# Instalar depend√™ncias usando PDM
RUN pdm install --prod --no-editable

# Copiar c√≥digo da aplica√ß√£o
COPY backend/ ./

# Instalar depend√™ncias novamente ap√≥s copiar o c√≥digo (caso necess√°rio)
RUN pdm install --prod --no-editable

# Criar um script de entrada melhorado
RUN echo '#!/bin/bash' > /app/start.sh && \
    echo 'set -e' >> /app/start.sh && \
    echo 'echo "üîß Verificando instala√ß√£o do PDM..."' >> /app/start.sh && \
    echo 'pdm info' >> /app/start.sh && \
    echo 'echo "üì¶ Listando pacotes instalados..."' >> /app/start.sh && \
    echo 'pdm list' >> /app/start.sh && \
    echo 'echo "üöÄ Iniciando aplica√ß√£o..."' >> /app/start.sh && \
    echo 'pdm run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload' >> /app/start.sh && \
    chmod +x /app/start.sh

# Expor a porta
EXPOSE 8000

# Adicionar endpoint de health check
RUN echo 'from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get("/health")\nasync def health_check():\n    return JSONResponse(content={"status": "healthy"})' > /app/health.py

# Comando para iniciar a aplica√ß√£o
CMD ["/app/start.sh"]
