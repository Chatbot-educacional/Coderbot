# Stage 1: build estático com pnpm
FROM node:20-alpine AS builder

# Ferramentas necessárias durante o build
RUN apk add --no-cache curl && npm install -g pnpm

WORKDIR /app

# Copiar manifestos primeiro para aproveitar cache de dependências
COPY frontend/package.json frontend/pnpm-lock.yaml ./

# Instalar dependências usando cache do pnpm
RUN --mount=type=cache,target=/root/.pnpm-store pnpm install --frozen-lockfile --prefer-offline

# Copiar código fonte
COPY frontend/ .

# Remover artefatos não utilizados no build final
RUN rm -rf src-tauri temp-tauri supabase 2>/dev/null || true

# ===== Build-time args para Vite =====
ARG VITE_API_URL=/api
ARG VITE_POCKETBASE_URL=/pb
ARG VITE_PUBLIC_POSTHOG_KEY
ARG VITE_PUBLIC_POSTHOG_HOST=https://us.i.posthog.com

# Definir variáveis de ambiente para o build (lidas pelo Vite)
ENV NODE_ENV=production \
    VITE_API_URL=${VITE_API_URL} \
    VITE_POCKETBASE_URL=${VITE_POCKETBASE_URL} \
    VITE_PUBLIC_POSTHOG_KEY=${VITE_PUBLIC_POSTHOG_KEY} \
    VITE_PUBLIC_POSTHOG_HOST=${VITE_PUBLIC_POSTHOG_HOST}

# Build da aplicação (falha se houver erro)
RUN pnpm run build

# Validar que o bundle foi gerado
RUN test -d dist

# Stage 2: runtime enxuto com Nginx servindo arquivos estáticos
FROM nginx:1.27-alpine AS runtime

# Ferramentas para healthcheck
RUN apk add --no-cache curl

# Copiar bundle estático
COPY --from=builder /app/dist /usr/share/nginx/html

# Configuração dedicada do Nginx para SPA
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

EXPOSE 3000

# Healthcheck simples apontando para o Nginx interno
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
